#!/bin/sh
#
# Copyright (C) 2018 Xiaoyu Wang <xwang224@buffalo.edu>
#
# This file is part of KoiWang's Crystal Toolkit Package
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
export CIF2CELL=/projects/academic/ezurek/xiaoyu/src/cif2cell-1.2.10/
export ISODATA=/projects/academic/ezurek/xiaoyu/src/isobyu/
export PYTHONPATH=/projects/academic/ezurek/xiaoyu/src/crystalspells/src/

if [ -z $1 ]; then 
   echo "Usage: fndsym.sh <filename> [lattice tolerance] [atomic position tolerance]"
   echo "       VASP format structures will be accepted"
   echo "       Tolerance parameters are optional"
   echo "       Default lattice tolerance = 0.0001 angstroms"
   echo "       Default atomic tolerance = 0.01 angstroms"
   exit -1
fi

if [ -z $2 ]; then
   latTol=0.0001
elif ! [[ $2 =~ ^[+]?[0-9]+\.?[0-9]*$ ]]; then
   echo "The tolerance must be a positive number, please check your input and try again"
   exit -1
else
   latTol=$2
fi

if [ -z $3 ]; then
   atomTol=0.01
elif ! [[ $3 =~ ^[+]?[0-9]+\.?[0-9]*$ ]]; then
   echo "The tolerance must be a positive number, please check your input and try again"
   exit -1
else
   atomTol=$3
fi

echo -e "\nFindSym For VASP Tool\n"

python -c"from crystal import *; A = Crystal(); A.from_file('$1');  A.to('fdsm', tol1=$latTol, tol2=$atomTol)" > findsym.in
filename="${1%.*}"
$ISODATA/findsym findsym.in > findsym.out
awk '/# CIF file created by FINDSYM, version 6.0/{flag=1;next}/# end of cif/{flag=0}flag' findsym.out > $filename.cif
awk '/Tolerance/' findsym.out
spacegroup=($(awk '/Space Group/' findsym.out))
echo "Detected spacegroup (${spacegroup[2]}) ${spacegroup[4]}"
echo
rm findsym.out findsym.in
rm findsym.log 
#cif2cell -f $filename.cif -p vasp -o $filename.vasp --vasp-format=5  
echo "symmetrized structure is written to $filename.cif"
